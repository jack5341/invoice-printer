{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/jack5341/jack5341/projects/invoice-printer/components/upload/upload.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, useToast, Container, Flex, Spacer, Input, Button, Icon } from \"@chakra-ui/react\";\nimport { DownloadIcon, DeleteIcon } from \"@chakra-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useMediaQuery } from \"react-responsive\";\nimport readXlsxFile from \"read-excel-file\";\nimport Result from \"./result/result\";\nconst excel = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nconst csv = \"text/csv\";\nexport default function Upload() {\n  const {\n    0: items,\n    1: setItems\n  } = useState(null);\n  const {\n    0: isUpload,\n    1: setIsUpload\n  } = useState(false);\n  const isMobile = useMediaQuery({\n    query: \"(max-width: 580px)\"\n  });\n  const toast = useToast();\n  useEffect(() => items ? setIsUpload(true) : setIsUpload(false), [items]);\n\n  function parseFile(file) {\n    if (!file) toast({\n      title: \"File upload failed\",\n      status: \"warning\",\n      position: \"top-left\",\n      isClosable: true\n    });\n    if (!file.type === excel && !file.type === csv) toast({\n      title: \"Wrong file type\",\n      status: \"error\",\n      position: \"top-left\",\n      isClosable: true\n    });\n\n    switch (file.type) {\n      case excel:\n        readXlsxFile(file).then(rows => {\n          setItems(rows);\n        });\n        setIsUpload(true);\n        break;\n\n      case csv:\n        let fileReader = new FileReader();\n\n        fileReader.onloadend = e => {\n          setItems(fileReader.result.toString().split(\"\\n\").map(e => e.trim()).map(e => e.split(\",\").map(e => e.trim())));\n        };\n\n        setIsUpload(true);\n        break;\n\n      default:\n        toast({\n          title: \"Somethings were wrong\",\n          status: \"error\",\n          position: \"top-left\",\n          isClosable: true\n        });\n        break;\n    }\n  }\n\n  const CircleIcon = props => /*#__PURE__*/_jsxDEV(Icon, _objectSpread(_objectSpread({\n    viewBox: \"0 0 200 200\"\n  }, props), {}, {\n    children: /*#__PURE__*/_jsxDEV(\"path\", {\n      fill: \"currentColor\",\n      d: \"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    padding: \"1.5rem\",\n    paddingTop: \"0px\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxW: isMobile ? \"container.xl\" : \"container.md\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        padding: isMobile ? \"0.5rem\" : \"1rem\",\n        borderRadius: \"0.5rem\",\n        border: \"1px solid gray\",\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(CircleIcon, {\n              boxSize: isMobile ? 8 : 10,\n              color: isUpload ? \"green.400\" : \"red.400\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              type: \"file\",\n              id: \"doc-input\",\n              accept: \".xlsx, .csv\",\n              onChange: e => parseFile(e.target.files[0]),\n              name: \"doc\",\n              display: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), isUpload ? /*#__PURE__*/_jsxDEV(Button, {\n              _focus: \"none\",\n              onClick: () => {\n                setItems(null);\n                document.getElementById(\"doc-input\").value = null;\n              },\n              rightIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 30\n              }, this),\n              size: isMobile ? \"sm\" : \"md\",\n              colorScheme: \"red\",\n              children: \"Delete File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              _focus: \"none\",\n              onClick: () => document.getElementById(\"doc-input\").click(),\n              rightIcon: /*#__PURE__*/_jsxDEV(DownloadIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 30\n              }, this),\n              size: isMobile ? \"sm\" : \"md\",\n              colorScheme: \"green\",\n              children: \"Upload Your File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), items ? items.slice(1).map((element, index) => /*#__PURE__*/_jsxDEV(Result, {\n        label: items[0],\n        items: element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/jack5341/jack5341/projects/invoice-printer/components/upload/upload.jsx"],"names":["Box","useToast","Container","Flex","Spacer","Input","Button","Icon","DownloadIcon","DeleteIcon","useEffect","useState","useMediaQuery","readXlsxFile","Result","excel","csv","Upload","items","setItems","isUpload","setIsUpload","isMobile","query","toast","parseFile","file","title","status","position","isClosable","type","then","rows","fileReader","FileReader","onloadend","e","result","toString","split","map","trim","CircleIcon","props","target","files","document","getElementById","value","click","slice","element","index"],"mappings":"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","sourcesContent":["import { Box,useToast,Container,Flex,Spacer,Input,Button,Icon } from \"@chakra-ui/react\";\nimport { DownloadIcon, DeleteIcon } from \"@chakra-ui/icons\";\nimport { useEffect, useState } from \"react\";\nimport { useMediaQuery } from \"react-responsive\";\nimport readXlsxFile from \"read-excel-file\";\n\nimport Result from \"./result/result\"\n\nconst excel =\n  \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\nconst csv = \"text/csv\";\n\nexport default function Upload() {\n  const [items, setItems] = useState(null);\n  const [isUpload, setIsUpload] = useState(false);\n  const isMobile = useMediaQuery({ query: \"(max-width: 580px)\" });\n  const toast = useToast();\n\n  useEffect(() => (items ? setIsUpload(true) : setIsUpload(false)), [items]);\n\n  function parseFile(file) {\n    if (!file)\n      toast({\n        title: \"File upload failed\",\n        status: \"warning\",\n        position: \"top-left\",\n        isClosable: true,\n      });\n\n    if (!file.type === excel && !file.type === csv)\n      toast({\n        title: \"Wrong file type\",\n        status: \"error\",\n        position: \"top-left\",\n        isClosable: true,\n      });\n\n    switch (file.type) {\n      case excel:\n        readXlsxFile(file).then((rows) => {\n          setItems(rows);\n        });\n        setIsUpload(true);\n        break;\n\n      case csv:\n        let fileReader = new FileReader();\n        fileReader.onloadend = (e) => {\n          setItems(\n            fileReader.result\n              .toString()\n              .split(\"\\n\")\n              .map((e) => e.trim())\n              .map((e) => e.split(\",\").map((e) => e.trim()))\n          );\n        };\n        setIsUpload(true);\n        break;\n\n      default:\n        toast({\n          title: \"Somethings were wrong\",\n          status: \"error\",\n          position: \"top-left\",\n          isClosable: true,\n        });\n        break;\n    }\n  }\n\n  const CircleIcon = (props) => (\n    <Icon viewBox=\"0 0 200 200\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\"\n      />\n    </Icon>\n  );\n\n  return (\n    <Box padding=\"1.5rem\" paddingTop=\"0px\">\n      <Container maxW={isMobile ? \"container.xl\" : \"container.md\"}>\n        <Box\n          padding={isMobile ? \"0.5rem\" : \"1rem\"}\n          borderRadius=\"0.5rem\"\n          border=\"1px solid gray\"\n        >\n          <Flex>\n            <Box>\n              <CircleIcon\n                boxSize={isMobile ? 8 : 10}\n                color={isUpload ? \"green.400\" : \"red.400\"}\n              />\n            </Box>\n            <Spacer />\n            <Box>\n              <Input\n                type=\"file\"\n                id=\"doc-input\"\n                accept=\".xlsx, .csv\"\n                onChange={(e) => parseFile(e.target.files[0])}\n                name=\"doc\"\n                display=\"none\"\n              />\n              {isUpload ? (\n                <Button\n                  _focus=\"none\"\n                  onClick={() => {\n                    setItems(null);\n                    document.getElementById(\"doc-input\").value = null;\n                  }}\n                  rightIcon={<DeleteIcon />}\n                  size={isMobile ? \"sm\" : \"md\"}\n                  colorScheme=\"red\"\n                >\n                  Delete File\n                </Button>\n              ) : (\n                <Button\n                  _focus=\"none\"\n                  onClick={() => document.getElementById(\"doc-input\").click()}\n                  rightIcon={<DownloadIcon />}\n                  size={isMobile ? \"sm\" : \"md\"}\n                  colorScheme=\"green\"\n                >\n                  Upload Your File\n                </Button>\n              )}\n            </Box>\n          </Flex>\n        </Box>\n        {items\n          ? items\n              .slice(1)\n              .map((element, index) => (\n                <Result key={index} label={items[0]} items={element} />\n              ))\n          : null}\n      </Container>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}